What does the lexical analyzer do:
    Reads the input source file character by character: 
        -skips white spaces
        - scan identifier (mnemonics only)
    Enters mnemonics in the symbol table:
        stores the mnemonic in the symbol table
        if the 
    
    Creates token:
        -transform mnemonic to a token objeect.
        -this object will be sent to the parser  
        -sends token to parser: need of a token class which will store the mnemonic as a token and send it to the parser one by one
    

What does the parser do:
    - requests token to the lexical analyzer
    - enters the identifier in the symbol table
    - Generates an intermediate representation: ArrayList of line statements
    - 




halt ; this is end of line\
token(halt, "") ---> parser -->   X     halt    X      X
token("; this is end of line\", "\n") ---> parser --->  X   X   ; this is end of line   " "

eol contient "\n"
    create line statement
    mettre dans intermediate 
    

    1 2 add
    1 --> symbol table
      --> parser [ 1 ] <--literal 